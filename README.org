#+AUTHOR: Elijah Samson
#+STARTUP: SHOWALL

* Redis proto

A multi-threaded implementation of redis written in rust ðŸ¦€.

This project is intended to be a drop-in replacement for redis.
It's under construction at the moment.

[[https://imgur.com/6uh3hTa.png][https://imgur.com/6uh3hTa.png]]

** Design


=redis-proto= is a black-box multi-threaded re-implementation of redis, backed by [[https://tokio.rs/][tokio]].
It features data-structure key-space/lock granularity, written entirely in safe rust.
It's currently protocol compatible with redis, so you should be able to test it out with your favourite tools.

The multi-threaded nature has advantages and disadvantages.
On one hand, =KEYS *= isn't particularly crippling for the server as it'll just keep a thread busy.
On the other hand, there's some lock-juggling overhead, especially for writes, which messes with tokio.

** Building / Running

There's currently no official release for the project. You can compile and install it yourself with the following command:

: cargo install --git https://github.com/obaraelijah/redis-proto

Note: This project requires the rust nightly. You can use [[https://rustup.rs/][rustup]] to install it.

Once it compiles you should be able to run it with =~ redis-proto=.

If you wish to download and run it yourself, you can do the following

#+begin_example
~ git clone https://github.com/obaraelijah/redis-proto
~ cd redis-proto
~ cargo run
#+end_example

Then use your favorite redis client. Eg. =redis-cli=:

#+begin_example
~ redis-cli
127.0.0.1:6379> set foo bar
OK
127.0.0.1:6379> get foo
"bar"
#+end_example

Or using the redis library for python:

#+begin_src python
import redis
from pprint import pprint

r = redis.Redis()
r.set('foobar', 'foobar')
pprint(r.get('foobar'))

for i in range(100):
    r.rpush('list', i)

list_res = r.lrange('list', 0, -1)

pprint(list_res[0:3])
pprint(sum(map(int, list_res)))

total = 0
for i in range(100):
    total += int(r.lpop('list'))
pprint(total)
#+end_src

Which will print:

#+begin_src python
b'foobar'
[b'0', b'1', b'2']
4950
4950
#+end_src

** Things left to do

*** Basic Datastructures

- [X] Keys
- [X] Sets
- [X] Lists
- [X] Hashes
- [ ] HyperLogLog
- [ ] Geo
- [-] Sorted Sets
  - [X] Basic Functionality
  - [ ] Still need some operations
- [ ] Strings

We should solidify the above before working on the more complex bits, but contributions are welcome :)

*** Redis Compatibility

- [X] Resp / server
- [ ] Database compatibility
  - [ ] Unsure if this is a good thing -- may be better to port existing dumps.
- [ ] Blocking / Concurrent Ops (ttl/save-on-x-ops)
- [ ] CLI / config compatibility
- [ ] Authentication

** Contribution Guide

** Implemented Commands

#+BEGIN_SRC python :results output raw :format org :exports results
  import redis

  r = redis.StrictRedis(decode_responses=True)

  all_commands = r.execute_command('printcmds')

  for command in all_commands:
      command_name, ops = command[0], command[1:]
      print(f'*** {command_name}\n')
      for op in ops:
          print(f'- ={op}=')
      print('\n')
#+END_SRC

#+RESULTS:
*** KeyOps

- =Set (Key, Value)=
- =MSet (RVec<(Key, Value)>)=
- =Get (Key)=
- =MGet (RVec<Key>)=
- =Del (RVec<Key>)=
- =Rename (Key, Key)=
- =RenameNx (Key, Key)=


*** ListOps

- =LIndex (Key, Index)=
- =LLen (Key)=
- =LPop (Key)=
- =LPush (Key, RVec<Value>)=
- =LPushX (Key, Value)=
- =LRange (Key, Index, Index)=
- =LSet (Key, Index, Value)=
- =LTrim (Key, Index, Index)=
- =RPop (Key)=
- =RPush (Key, RVec<Value>)=
- =RPushX (Key, Value)=
- =RPopLPush (Key, Key)=
- =BLPop (Key, UTimeout)=
- =BRPop (Key, UTimeout)=


*** HashOps

- =HGet (Key, Key)=
- =HSet (Key, Key, Value)=
- =HExists (Key, Key)=
- =HGetAll (Key)=
- =HMGet (Key, RVec<Key>)=
- =HKeys (Key)=
- =HMSet (Key, RVec<(Key, Value)>)=
- =HIncrBy (Key, Key, Count)=
- =HLen (Key)=
- =HDel (Key, RVec<Key>)=
- =HVals (Key)=
- =HStrLen (Key, Key)=
- =HSetNX (Key, Key, Value)=

*** SetOps

- =SAdd (Key, RVec<Value>)=
- =SCard (Key)=
- =SDiff (RVec<Value>)=
- =SDiffStore (Key, RVec<Value>)=
- =SInter (RVec<Value>)=
- =SInterStore (Key, RVec<Value>)=
- =SIsMember (Key, Value)=
- =SMembers (Key)=
- =SMove (Key, Key, Value)=
- =SPop (Key, Option<Count>)=
- =SRandMembers (Key, Option<Count>)=
- =SRem (Key, RVec<Value>)=
- =SUnion (RVec<Value>)=
- =SUnionStore (Key, RVec<Value>)=


*** ZSetOps

- =ZAdd (Key, RVec<(Score, Key)>)=
- =ZRem (Key, RVec<Key>)=
- =ZRange (Key, Score, Score)=
- =ZCard (Key)=
- =ZScore (Key, Key)=
- =ZPopMax (Key, Count)=
- =ZPopMin (Key, Count)=
- =ZRank (Key, Key)=


*** BloomOps

- =BInsert (Key, Value)=
- =BContains (Key, Value)=


*** StackOps

- =STPush (Key, Value)=
- =STPop (Key)=
- =STPeek (Key)=
- =STSize (Key)=


*** HyperLogLogOps

- =PfAdd (Key, RVec<Value>)=
- =PfCount (RVec<Key>)=
- =PfMerge (Key, RVec<Key>)=


*** MiscOps

- =Keys ()=
- =Exists (Vec<Key>)=
- =Pong ()=
- =FlushAll ()=
- =FlushDB ()=
- =Echo (Value)=
- =PrintCmds ()=
- =Select (Index)=
- =Script (Value)=
- =EmbeddedScript (Value, Vec<RedisValueRef>)=
- =Info ()=